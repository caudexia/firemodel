{"version":3,"sources":["../../src/client/index.ts","../../src/BaseModel.ts"],"sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { ZodSchema, ZodTypeDef } from 'zod';\nimport { createModel } from '../BaseModel';\nimport {\n  getDoc,\n  doc,\n  getFirestore,\n  addDoc,\n  collection,\n  updateDoc,\n  deleteDoc,\n  onSnapshot,\n  Query,\n  Unsubscribe,\n} from 'firebase/firestore';\n\ninterface FirebaseConfig {\n  apiKey: string;\n  authDomain: string;\n  projectId: string;\n  storageBucket: string;\n  messagingSenderId: string;\n  appId: string;\n  measurementId?: string;\n}\n\nexport interface DocUpdate {\n  id: string;\n  data: Record<number | string | symbol, any>;\n  exists: boolean;\n};\n\n/**\n * Initializes the firemodel package with the given Firestore instance for web.\n * \n * @param {FirebaseConfig} config - Firestore config for web.\n */\nexport const initializeWeb = (config: FirebaseConfig) => {\n  // Initialize Firebase\n  if (!firebase.getApps().length) {\n    firebase.initializeApp(config);\n  } else {\n    firebase.getApp();\n  }\n\n  // Initialize Firestore\n  const firestore = getFirestore();\n\n  // You can add more configurations here, such as enabling offline support\n  // firestore.enablePersistence()\n  //   .catch((err) => {\n  //     console.error(\"Firestore persistence error:\", err);\n  //   });\n\n  return firestore;\n};\n\n/**\n * Creates a web model with methods tailored for the Firebase Web SDK.\n * \n * @template IInput - The type of the data model used for input (to be validated).\n * @template IOutput - The type of the data model used for output (to be returned).\n * @param {string} collectionName - The name of the Firestore collection.\n * @param {ZodSchema<IOutput, ZodTypeDef, IInput>} schema - The Zod schema for data validation.\n * @returns {ReturnType<typeof createModel<IInput, IOutput>>} - The methods associated with the web model.\n */\nexport const createWebModel = <IInput, IOutput>(collectionName: string, schema: ZodSchema<IOutput, ZodTypeDef, IInput>) => {\n  const baseModel = createModel(collectionName, schema);\n\n  return {\n      ...baseModel,\n\n    /**\n     * Fetches a document by its ID.\n     * \n     * @param {string} id - The ID of the document to fetch.\n     * @returns {Promise<IOutput | undefined>} - The fetched document or undefined if not found.\n     */\n    async get(id: string): Promise<IOutput | undefined> {\n      const docSnap = await getDoc(doc(getFirestore(), collectionName, id));\n\n      if (docSnap.exists()) {\n        return baseModel.validate(docSnap.data() as IInput);\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Adds a new document to the collection.\n     * \n     * @param {IInput} data - The data of the document to add.\n     * @returns {Promise<string>} - The ID of the added document.\n     */\n    async add(data: IInput): Promise<string> {\n      const validatedData = baseModel.validate(data);\n\n      if (!validatedData) {\n        throw new Error('firemodel: Validation failed for the provided data.');\n      }\n\n      const docRef = await addDoc(collection(getFirestore(), collectionName), validatedData);\n      return docRef.id;\n    },\n\n    /**\n     * Updates an existing document in the collection.\n     * \n     * @param {string} id - The ID of the document to update.\n     * @param {Partial<IInput>} data - The data to update in the document.\n     * @returns {Promise<void>} - Resolves when the update is successful.\n     * @throws {Error} - Throws an error if validation fails or if other issues arise during the update.\n     */\n    async update(id: string, data: Partial<IInput>): Promise<void> {\n      const validatedData = baseModel.validate(data);\n\n      if (!validatedData) {\n        throw new Error('firemodel: Validation failed for the provided data.');\n      }\n\n      // https://github.com/googleapis/nodejs-firestore/issues/1745\n      await updateDoc(doc(getFirestore(), collectionName, id), validatedData as any);\n    },\n\n    /**\n     * Deletes a document from the collection by its ID.\n     * \n     * @param {string} id - The ID of the document to delete.\n     * @returns {Promise<void>} - Resolves when the deletion is successful.\n     * @throws {Error} - Throws an error if issues arise during the deletion.\n     */\n    async delete(id: string): Promise<void> {\n      await deleteDoc(doc(getFirestore(), collectionName, id));\n    },\n\n    /**\n     * Subscribes to real-time updates for the collection. Whenever data in the collection changes,\n     * the provided callback is invoked with the updated set of documents.\n     * \n     * @param {function(Array<{ data: IOutput } & DocUpdate>): void} callback - The function to call with the updated documents.\n     * @param ?{function(query: Query): Query} queryFn - An optional function to modify or filter the base query.\n     * @returns {Unsubscribe} - A function to unsubscribe from the real-time updates.\n     * @throws {Error} - Throws an error if issues arise during the subscription.\n     */\n    subscribeToRealtimeUpdates(\n      callback: (items: Array<{ data: IOutput } & DocUpdate>) => void,\n      queryFn?: (query: Query) => Query,\n    ): Unsubscribe {\n      let baseQuery: Query = collection(getFirestore(), collectionName);\n\n      if (typeof queryFn === 'function') {\n        baseQuery = queryFn(baseQuery);\n      }\n\n      return onSnapshot(baseQuery, (snapshot) => {\n        const items: Array<{ data: IOutput } & DocUpdate> = [];\n\n        snapshot.forEach((docSnap) => {\n          const data = docSnap.data();\n          const validatedData = baseModel.validate(data as IInput);\n\n          if (validatedData) {\n            items.push({\n              id: docSnap.id,\n              data: validatedData,\n              exists: docSnap.exists(),\n            });\n          }\n        });\n\n        callback(items);\n      });\n    },\n  };\n};\n","import { ZodSchema, ZodTypeDef } from 'zod';\n\ninterface ModelMethods<IInput, IOutput> {\n  validate: (data: Partial<IInput>) => IOutput | undefined;\n  get: (id: string) => Promise<IOutput | undefined>;\n  add: (data: IInput) => Promise<string>;\n  update: (id: string, data: Partial<IInput>) => Promise<void>;\n  delete: (id: string) => Promise<void>;\n}\n\n/**\n * Creates a base model with common methods for data validation and manipulation.\n * \n * @template IInput - The type of the data model used for input.\n * @template IOutput - The type of the data model used for output.\n * @param {string} _collectionName - The name of the Firestore collection.\n * @param {ZodSchema<IInput>} schema - The Zod schema for data validation.\n * @returns {ModelMethods<IInput, IOutput>} - The methods associated with the model.\n */\nexport function createModel<IInput, IOutput>(_collectionName: string, schema: ZodSchema<IOutput, ZodTypeDef, IInput>): ModelMethods<IInput, IOutput> {\n  return {\n    validate(data: Partial<IInput>): IOutput | undefined {\n      return schema.parse(data);\n    },\n    async get(_id: string): Promise<IOutput | undefined> {\n      throw new Error(\"Method not implemented.\");\n    },\n    async add(_data: IInput): Promise<string> {\n      throw new Error(\"Method not implemented.\");\n    },\n    async update(_id: string, _data: Partial<IInput>): Promise<void> {\n      throw new Error(\"Method not implemented.\");\n    },\n    async delete(_id: string): Promise<void> {\n      throw new Error(\"Method not implemented.\");\n    },\n  };\n}\n"],"mappings":"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","names":["import_firestore"]}