import*as o from"firebase/app";import"firebase/firestore";function g(i,n){return{validate(e){try{return n.parse(e)}catch{return}},async get(e){throw new Error("Method not implemented.")},async add(e){throw new Error("Method not implemented.")},async update(e,t){throw new Error("Method not implemented.")},async delete(e){throw new Error("Method not implemented.")}}}import{getDoc as h,doc as m,getFirestore as d,addDoc as y,collection as p,updateDoc as T,deleteDoc as v,onSnapshot as w}from"firebase/firestore";var E=i=>(o.getApps().length?o.getApp():o.initializeApp(i),d()),_=(i,n)=>{let e=g(i,n);return{...e,async get(t){let r=await h(m(d(),i,t));if(r.exists())return e.validate(r.data())},async add(t){let r=e.validate(t);if(!r)throw new Error("firemodel: Validation failed for the provided data.");return(await y(p(d(),i),r)).id},async update(t,r){let a=e.validate(r);if(!a)throw new Error("firemodel: Validation failed for the provided data.");await T(m(d(),i,t),a)},async delete(t){await v(m(d(),i,t))},subscribeToRealtimeUpdates(t,r){let a=p(d(),i);return r&&(a=r(a)),w(a,l=>{let c=[];l.forEach(s=>{let u=s.data(),f=e.validate(u);f&&c.push({id:s.id,data:f,exists:s.exists()})}),t(c)})}}};export{_ as createWebModel,E as initializeWeb};
//# sourceMappingURL=index.mjs.map