import*as o from"firebase/app";import"firebase/firestore";function c(i,n){return{validate(e){try{return n.parse(e)}catch{return}},async get(e){throw new Error("Method not implemented.")},async add(e){throw new Error("Method not implemented.")},async update(e,t){throw new Error("Method not implemented.")},async delete(e){throw new Error("Method not implemented.")}}}import{getDoc as h,doc as s,getFirestore as d,addDoc as T,collection as g,updateDoc as v,deleteDoc as y,onSnapshot as w}from"firebase/firestore";var S=i=>(o.getApps().length?o.getApp():o.initializeApp(i),d()),_=(i,n)=>{let e=c(i,n);return{...e,async get(t){let r=await h(s(d(),i,t));if(r.exists())return e.validate(r.data())},async add(t){let r=e.validate(t);if(!r)throw new Error("firemodel: Validation failed for the provided data.");return(await T(g(d(),i),r)).id},async update(t,r){let a=e.validate(r);if(!a)throw new Error("firemodel: Validation failed for the provided data.");await v(s(d(),i,t),a)},async delete(t){await y(s(d(),i,t))},subscribeToRealtimeUpdates(t,r){let a=g(d(),i);return r&&(a=r(a)),w(a,p=>{let m=[];p.forEach(l=>{let u=l.data(),f=e.validate(u);f&&m.push(f)}),t(m)})}}};export{_ as createWebModel,S as initializeWeb};
//# sourceMappingURL=index.mjs.map