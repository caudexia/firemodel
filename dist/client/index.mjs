import*as n from"firebase/app";import"firebase/firestore";function f(i,o){return{validate(t){try{return o.parse(t)}catch{return}},async get(t){throw new Error("Method not implemented.")},async add(t){throw new Error("Method not implemented.")},async update(t,e){throw new Error("Method not implemented.")},async delete(t){throw new Error("Method not implemented.")}}}import{getDoc as l,doc as u,getFirestore as d,addDoc as h,collection as m,updateDoc as y,deleteDoc as v,onSnapshot as P}from"firebase/firestore";var x=i=>(n.getApps().length?n.getApp():n.initializeApp(i),d()),Z=(i,o)=>{let t=f(i,o);return{...t,async get(e){let r=await l(u(d(),i,e));if(r.exists())return t.validate(r.data())},async add(e){let r=t.validate(e);if(!r)throw new Error("firemodel: Validation failed for the provided data.");return(await h(m(d(),i),r)).id},async update(e,r){let a=t.validate(r);if(!a)throw new Error("firemodel: Validation failed for the provided data.");await y(u(d(),i,e),a)},async delete(e){await v(u(d(),i,e))},subscribeToRealtimeUpdates(e,r){let a=m(d(),i);return r&&(a=r(a)),P(a,c=>{let p=[];c.forEach(s=>{let g=s.data(),I=t.validate(g);I&&p.push({id:s.id,data:I,exists:s.exists()})}),e(p)})}}};export{Z as createWebModel,x as initializeWeb};
//# sourceMappingURL=index.mjs.map