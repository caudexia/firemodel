{"version":3,"sources":["../../src/client/index.ts","../../src/BaseModel.ts"],"sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { ZodSchema } from 'zod';\nimport { createModel } from '../BaseModel';\nimport {\n  getDoc,\n  doc,\n  getFirestore,\n  addDoc,\n  collection,\n  updateDoc,\n  deleteDoc,\n  onSnapshot,\n  Query,\n} from 'firebase/firestore';\n\ninterface FirebaseConfig {\n  apiKey: string;\n  authDomain: string;\n  projectId: string;\n  storageBucket: string;\n  messagingSenderId: string;\n  appId: string;\n  measurementId?: string;\n}\n\n/**\n * Initializes the firemodel package with the given Firestore instance for web.\n * \n * @param {FirebaseConfig} config - Firestore config for web.\n */\nexport const initializeWeb = (config: FirebaseConfig) => {\n  // Initialize Firebase\n  if (!firebase.getApps().length) {\n    firebase.initializeApp(config);\n  } else {\n    firebase.getApp();\n  }\n\n  // Initialize Firestore\n  const firestore = getFirestore();\n\n  // You can add more configurations here, such as enabling offline support\n  // firestore.enablePersistence()\n  //   .catch((err) => {\n  //     console.error(\"Firestore persistence error:\", err);\n  //   });\n\n  return firestore;\n};\n\n/**\n * Creates a web model with methods tailored for the Firebase Web SDK.\n * \n * @template T - The type of the data model.\n * @param {string} collectionName - The name of the Firestore collection.\n * @param {ZodSchema<T>} schema - The Zod schema for data validation.\n * @returns {ReturnType<typeof createModel<T>>} - The methods associated with the web model.\n */\nexport const createWebModel = <T>(collectionName: string, schema: ZodSchema<T>) => {\n  const baseModel = createModel(collectionName, schema);\n\n  return {\n      ...baseModel,\n\n    /**\n     * Fetches a document by its ID.\n     * \n     * @param {string} id - The ID of the document to fetch.\n     * @returns {Promise<T | undefined>} - The fetched document or undefined if not found.\n     */\n    async get(id: string): Promise<T | undefined> {\n      const docSnap = await getDoc(doc(getFirestore(), collectionName, id));\n\n      if (docSnap.exists()) {\n        return baseModel.validate(docSnap.data() as T);\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Adds a new document to the collection.\n     * \n     * @param {T} data - The data of the document to add.\n     * @returns {Promise<string>} - The ID of the added document.\n     */\n    async add(data: T): Promise<string> {\n      const validatedData = baseModel.validate(data);\n\n      if (!validatedData) {\n        throw new Error('firemodel: Validation failed for the provided data.');\n      }\n\n      const docRef = await addDoc(collection(getFirestore(), collectionName), validatedData);\n      return docRef.id;\n    },\n\n    /**\n     * Updates an existing document in the collection.\n     * \n     * @param {string} id - The ID of the document to update.\n     * @param {Partial<T>} data - The data to update in the document.\n     * @returns {Promise<void>} - Resolves when the update is successful.\n     * @throws {Error} - Throws an error if validation fails or if other issues arise during the update.\n     */\n    async update(id: string, data: Partial<T>): Promise<void> {\n      const validatedData = baseModel.validate(data);\n\n      if (!validatedData) {\n        throw new Error('firemodel: Validation failed for the provided data.');\n      }\n\n      // https://github.com/googleapis/nodejs-firestore/issues/1745\n      await updateDoc(doc(getFirestore(), collectionName, id), validatedData as any);\n    },\n\n    /**\n     * Deletes a document from the collection by its ID.\n     * \n     * @param {string} id - The ID of the document to delete.\n     * @returns {Promise<void>} - Resolves when the deletion is successful.\n     * @throws {Error} - Throws an error if issues arise during the deletion.\n     */\n    async delete(id: string): Promise<void> {\n      await deleteDoc(doc(getFirestore(), collectionName, id));\n    },\n\n    /**\n     * Subscribes to real-time updates for the collection. Whenever data in the collection changes,\n     * the provided callback is invoked with the updated set of documents.\n     * \n     * @param {function(T[]): void} callback - The function to call with the updated documents.\n     * @param {function(query: typeof Query): typeof Query} [queryFn] - \n     *        An optional function to modify or filter the base query.\n     * @returns {function(): void} - A function to unsubscribe from the real-time updates.\n     * @throws {Error} - Throws an error if issues arise during the subscription.\n     */\n    subscribeToRealtimeUpdates(\n      callback: (items: T[]) => void,\n      queryFn?: (query: Query) => Query,\n    ) {\n      let baseQuery: Query = collection(getFirestore(), collectionName);\n\n      if (queryFn) {\n        baseQuery = queryFn(baseQuery);\n      }\n\n      return onSnapshot(baseQuery, snapshot => {\n        const items: T[] = [];\n        snapshot.forEach(docSnap => {\n          const data = docSnap.data();\n          const validatedData = baseModel.validate(data);\n\n          if (validatedData) {\n            items.push(validatedData);\n          }\n        });\n        callback(items);\n      });\n    },\n  };\n};\n","import { ZodSchema } from 'zod';\n\ninterface ModelMethods<T> {\n  validate: (data: any) => T | undefined;\n  get: (id: string) => Promise<T | undefined>;\n  add: (data: T) => Promise<string>;\n  update: (id: string, data: Partial<T>) => Promise<void>;\n  delete: (id: string) => Promise<void>;\n}\n\n/**\n * Creates a base model with common methods for data validation and manipulation.\n * \n * @template T - The type of the data model.\n * @param {string} _collectionName - The name of the Firestore collection.\n * @param {ZodSchema<T>} schema - The Zod schema for data validation.\n * @returns {ModelMethods<T>} - The methods associated with the model.\n */\nexport function createModel<T>(_collectionName: string, schema: ZodSchema<T>): ModelMethods<T> {\n  return {\n    validate(data: any): T | undefined {\n      try {\n        return schema.parse(data);\n      } catch (error) {\n        return undefined;\n      }\n    },\n    async get(_id: string): Promise<T | undefined> {\n      throw new Error(\"Method not implemented.\");\n    },\n    async add(_data: T): Promise<string> {\n      throw new Error(\"Method not implemented.\");\n    },\n    async update(_id: string, _data: Partial<T>): Promise<void> {\n      throw new Error(\"Method not implemented.\");\n    },\n    async delete(_id: string): Promise<void> {\n      throw new Error(\"Method not implemented.\");\n    },\n  };\n}\n"],"mappings":"AAAA,UAAYA,MAAc,eAC1B,MAAO,qBCiBA,SAASC,EAAeC,EAAyBC,EAAuC,CAC7F,MAAO,CACL,SAASC,EAA0B,CACjC,GAAI,CACF,OAAOD,EAAO,MAAMC,CAAI,CAC1B,MAAgB,CACd,MACF,CACF,EACA,MAAM,IAAIC,EAAqC,CAC7C,MAAM,IAAI,MAAM,yBAAyB,CAC3C,EACA,MAAM,IAAIC,EAA2B,CACnC,MAAM,IAAI,MAAM,yBAAyB,CAC3C,EACA,MAAM,OAAOD,EAAaC,EAAkC,CAC1D,MAAM,IAAI,MAAM,yBAAyB,CAC3C,EACA,MAAM,OAAOD,EAA4B,CACvC,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CACF,CACF,CDpCA,OACE,UAAAE,EACA,OAAAC,EACA,gBAAAC,EACA,UAAAC,EACA,cAAAC,EACA,aAAAC,EACA,aAAAC,EACA,cAAAC,MAEK,qBAiBA,IAAMC,EAAiBC,IAEd,UAAQ,EAAE,OAGb,SAAO,EAFP,gBAAcA,CAAM,EAMbP,EAAa,GAmBpBQ,EAAiB,CAAIC,EAAwBC,IAAyB,CACjF,IAAMC,EAAYC,EAAYH,EAAgBC,CAAM,EAEpD,MAAO,CACH,GAAGC,EAQL,MAAM,IAAIE,EAAoC,CAC5C,IAAMC,EAAU,MAAMhB,EAAOC,EAAIC,EAAa,EAAGS,EAAgBI,CAAE,CAAC,EAEpE,GAAIC,EAAQ,OAAO,EACjB,OAAOH,EAAU,SAASG,EAAQ,KAAK,CAAM,CAIjD,EAQA,MAAM,IAAIC,EAA0B,CAClC,IAAMC,EAAgBL,EAAU,SAASI,CAAI,EAE7C,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,qDAAqD,EAIvE,OADe,MAAMf,EAAOC,EAAWF,EAAa,EAAGS,CAAc,EAAGO,CAAa,GACvE,EAChB,EAUA,MAAM,OAAOH,EAAYE,EAAiC,CACxD,IAAMC,EAAgBL,EAAU,SAASI,CAAI,EAE7C,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,qDAAqD,EAIvE,MAAMb,EAAUJ,EAAIC,EAAa,EAAGS,EAAgBI,CAAE,EAAGG,CAAoB,CAC/E,EASA,MAAM,OAAOH,EAA2B,CACtC,MAAMT,EAAUL,EAAIC,EAAa,EAAGS,EAAgBI,CAAE,CAAC,CACzD,EAYA,2BACEI,EACAC,EACA,CACA,IAAIC,EAAmBjB,EAAWF,EAAa,EAAGS,CAAc,EAEhE,OAAIS,IACFC,EAAYD,EAAQC,CAAS,GAGxBd,EAAWc,EAAWC,GAAY,CACvC,IAAMC,EAAa,CAAC,EACpBD,EAAS,QAAQN,GAAW,CAC1B,IAAMC,EAAOD,EAAQ,KAAK,EACpBE,EAAgBL,EAAU,SAASI,CAAI,EAEzCC,GACFK,EAAM,KAAKL,CAAa,CAE5B,CAAC,EACDC,EAASI,CAAK,CAChB,CAAC,CACH,CACF,CACF","names":["firebase","createModel","_collectionName","schema","data","_id","_data","getDoc","doc","getFirestore","addDoc","collection","updateDoc","deleteDoc","onSnapshot","initializeWeb","config","createWebModel","collectionName","schema","baseModel","createModel","id","docSnap","data","validatedData","callback","queryFn","baseQuery","snapshot","items"]}