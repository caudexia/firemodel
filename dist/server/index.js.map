{"version":3,"sources":["../../src/server/index.ts","../../src/BaseModel.ts"],"sourcesContent":["import { ZodSchema, ZodTypeDef } from 'zod';\nimport admin from 'firebase-admin';\nimport { createModel } from '../BaseModel';\n\nlet firestoreInstance: ReturnType<typeof admin.firestore> | null = null;\n\n/**\n * Gets the initialized Firestore instance for server.\n * \n * @returns {ReturnType<typeof firestore>} - The Firestore instance for server.\n * @throws {Error} - Throws an error if the firemodel has not been initialized.\n */\nexport const getFirestoreInstanceServer = (): ReturnType<typeof admin.firestore> => {\n  if (!firestoreInstance) {\n    throw new Error('firemodel has not been initialized. Please call the initializeServer function first.');\n  }\n\n  return firestoreInstance;\n};\n\n/**\n * Initializes the firemodel package with the given Firebase Admin SDK credentials for server.\n * \n * @param {admin.ServiceAccount} config - Firebase Admin SDK credentials.\n * @param {string} databaseURL - Database URL for Firebase Admin SDK.\n */\nexport const initializeServer = (config: admin.ServiceAccount, databaseURL: string): void => {\n  admin.initializeApp({\n    credential: admin.credential.cert(config),\n    databaseURL: databaseURL\n  });\n\n  firestoreInstance = admin.firestore();\n};\n\n/**\n * Creates a server model with methods tailored for the Firebase Admin SDK.\n * \n * @template IInput - The type of the data model used for input (to be validated).\n * @template IOutput - The type of the data model used for output (to be returned).\n * @param {string} collectionName - The name of the Firestore collection.\n * @param {ZodSchema<IOutput, ZodTypeDef, IInput>} schema - The Zod schema for data validation.\n * @returns {ReturnType<typeof createModel<IInput, IOutput>>} - The methods associated with the web model.\n */\nexport const createServerModel = <IInput, IOutput>(collectionName: string, schema: ZodSchema<IOutput, ZodTypeDef, IInput>) => {\n  const baseModel = createModel(collectionName, schema);\n  const db = admin.firestore();\n\n  return {\n    ...baseModel,\n\n    /**\n     * Fetches a document by its ID.\n     * \n     * @param {string} id - The ID of the document to fetch.\n     * @returns {Promise<IOutput | undefined>} - The fetched document or undefined if not found.\n     */\n    async get(id: string): Promise<IOutput | undefined> {\n      const docSnap = await db.collection(collectionName).doc(id).get();\n\n      if (docSnap.exists) {\n        return baseModel.validate(docSnap.data() as IInput);\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Adds a new document to the collection.\n     * \n     * @param {IInput} data - The data of the document to add.\n     * @returns {Promise<string>} - The ID of the added document.\n     */\n    async add(data: IInput): Promise<string> {\n      const validatedData = baseModel.validate(data);\n\n      if (!validatedData) {\n        throw new Error('firemodel: Validation failed for the provided data.');\n      }\n\n      const docRef = await db.collection(collectionName).add(validatedData);\n      return docRef.id;\n    },\n\n    /**\n     * Updates an existing document in the collection.\n     * \n     * @param {string} id - The ID of the document to update.\n     * @param {Partial<IInput>} data - The data to update in the document.\n     * @returns {Promise<void>} - Resolves when the update is successful.\n     * @throws {Error} - Throws an error if validation fails or if other issues arise during the update.\n     */\n    async update(id: string, data: Partial<IInput>): Promise<void> {\n      const validatedData = baseModel.validate(data);\n\n      if (!validatedData) {\n        throw new Error('firemodel: Validation failed for the provided data.');\n      }\n\n      // https://github.com/googleapis/nodejs-firestore/issues/1745\n      await db.collection(collectionName).doc(id).update(validatedData as any);\n    },\n\n    /**\n     * Deletes a document from the collection by its ID.\n     * \n     * @param {string} id - The ID of the document to delete.\n     * @returns {Promise<void>} - Resolves when the deletion is successful.\n     * @throws {Error} - Throws an error if issues arise during the deletion.\n     */\n    async delete(id: string): Promise<void> {\n      await db.collection(collectionName).doc(id).delete();\n    },\n  };\n};\n","import { ZodSchema, ZodTypeDef } from 'zod';\n\ninterface ModelMethods<IInput, IOutput> {\n  validate: (data: Partial<IInput>) => IOutput | undefined;\n  get: (id: string) => Promise<IOutput | undefined>;\n  add: (data: IInput) => Promise<string>;\n  update: (id: string, data: Partial<IInput>) => Promise<void>;\n  delete: (id: string) => Promise<void>;\n}\n\n/**\n * Creates a base model with common methods for data validation and manipulation.\n * \n * @template IInput - The type of the data model used for input.\n * @template IOutput - The type of the data model used for output.\n * @param {string} _collectionName - The name of the Firestore collection.\n * @param {ZodSchema<IInput>} schema - The Zod schema for data validation.\n * @returns {ModelMethods<IInput, IOutput>} - The methods associated with the model.\n */\nexport function createModel<IInput, IOutput>(_collectionName: string, schema: ZodSchema<IOutput, ZodTypeDef, IInput>): ModelMethods<IInput, IOutput> {\n  return {\n    validate(data: Partial<IInput>): IOutput | undefined {\n      return schema.parse(data);\n    },\n    async get(_id: string): Promise<IOutput | undefined> {\n      throw new Error(\"Method not implemented.\");\n    },\n    async add(_data: IInput): Promise<string> {\n      throw new Error(\"Method not implemented.\");\n    },\n    async update(_id: string, _data: Partial<IInput>): Promise<void> {\n      throw new Error(\"Method not implemented.\");\n    },\n    async delete(_id: string): Promise<void> {\n      throw new Error(\"Method not implemented.\");\n    },\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,4BAAkB;;;ACkBX,SAAS,YAA6B,iBAAyB,QAA+E;AACnJ,SAAO;AAAA,IACL,SAAS,MAA4C;AACnD,aAAO,OAAO,MAAM,IAAI;AAAA,IAC1B;AAAA,IACA,MAAM,IAAI,KAA2C;AACnD,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC3C;AAAA,IACA,MAAM,IAAI,OAAgC;AACxC,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC3C;AAAA,IACA,MAAM,OAAO,KAAa,OAAuC;AAC/D,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC3C;AAAA,IACA,MAAM,OAAO,KAA4B;AACvC,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC3C;AAAA,EACF;AACF;;;ADjCA,IAAI,oBAA+D;AAQ5D,IAAM,6BAA6B,MAA0C;AAClF,MAAI,CAAC,mBAAmB;AACtB,UAAM,IAAI,MAAM,sFAAsF;AAAA,EACxG;AAEA,SAAO;AACT;AAQO,IAAM,mBAAmB,CAAC,QAA8B,gBAA8B;AAC3F,wBAAAA,QAAM,cAAc;AAAA,IAClB,YAAY,sBAAAA,QAAM,WAAW,KAAK,MAAM;AAAA,IACxC;AAAA,EACF,CAAC;AAED,sBAAoB,sBAAAA,QAAM,UAAU;AACtC;AAWO,IAAM,oBAAoB,CAAkB,gBAAwB,WAAmD;AAC5H,QAAM,YAAY,YAAY,gBAAgB,MAAM;AACpD,QAAM,KAAK,sBAAAA,QAAM,UAAU;AAE3B,SAAO;AAAA,IACL,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQH,MAAM,IAAI,IAA0C;AAClD,YAAM,UAAU,MAAM,GAAG,WAAW,cAAc,EAAE,IAAI,EAAE,EAAE,IAAI;AAEhE,UAAI,QAAQ,QAAQ;AAClB,eAAO,UAAU,SAAS,QAAQ,KAAK,CAAW;AAAA,MACpD;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,MAAM,IAAI,MAA+B;AACvC,YAAM,gBAAgB,UAAU,SAAS,IAAI;AAE7C,UAAI,CAAC,eAAe;AAClB,cAAM,IAAI,MAAM,qDAAqD;AAAA,MACvE;AAEA,YAAM,SAAS,MAAM,GAAG,WAAW,cAAc,EAAE,IAAI,aAAa;AACpE,aAAO,OAAO;AAAA,IAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,MAAM,OAAO,IAAY,MAAsC;AAC7D,YAAM,gBAAgB,UAAU,SAAS,IAAI;AAE7C,UAAI,CAAC,eAAe;AAClB,cAAM,IAAI,MAAM,qDAAqD;AAAA,MACvE;AAGA,YAAM,GAAG,WAAW,cAAc,EAAE,IAAI,EAAE,EAAE,OAAO,aAAoB;AAAA,IACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,MAAM,OAAO,IAA2B;AACtC,YAAM,GAAG,WAAW,cAAc,EAAE,IAAI,EAAE,EAAE,OAAO;AAAA,IACrD;AAAA,EACF;AACF;","names":["admin"]}